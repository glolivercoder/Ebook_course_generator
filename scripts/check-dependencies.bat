@echo off
chcp 65001 >nul
title Verificador de Depend√™ncias

echo.
echo üîç VERIFICADOR DE DEPEND√äNCIAS
echo ==============================
echo.

set "all_ok=true"

:: Verificar Node.js
echo üì¶ Verificando Node.js...
node --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Node.js n√£o encontrado
    echo    üì• Download: https://nodejs.org/
    set "all_ok=false"
) else (
    echo ‚úÖ Node.js encontrado:
    node --version
)

:: Verificar npm
echo.
echo üì¶ Verificando npm...
npm --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå npm n√£o encontrado
    set "all_ok=false"
) else (
    echo ‚úÖ npm encontrado:
    npm --version
)

:: Verificar Python
echo.
echo üêç Verificando Python...
python --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Python n√£o encontrado
    echo    üì• Download: https://python.org/
    set "all_ok=false"
) else (
    echo ‚úÖ Python encontrado:
    python --version
)

:: Verificar pip
echo.
echo üì¶ Verificando pip...
pip --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå pip n√£o encontrado
    set "all_ok=false"
) else (
    echo ‚úÖ pip encontrado:
    pip --version
)

:: Verificar depend√™ncias Node.js
echo.
echo üì¶ Verificando depend√™ncias Node.js...
if exist "node_modules" (
    echo ‚úÖ Depend√™ncias Node.js instaladas
) else (
    echo ‚ö†Ô∏è Depend√™ncias Node.js n√£o instaladas
    echo    Execute: npm install
    set "all_ok=false"
)

:: Verificar ambientes virtuais Python
echo.
echo üêç Verificando ambientes virtuais Python...
if exist "venvs\agno" (
    echo ‚úÖ Ambiente virtual Agno encontrado
) else (
    echo ‚ö†Ô∏è Ambiente virtual Agno n√£o encontrado
    echo    Execute: scripts\setup-python-services.bat
)

if exist "venvs\crawl4ai" (
    echo ‚úÖ Ambiente virtual Crawl4AI encontrado
) else (
    echo ‚ö†Ô∏è Ambiente virtual Crawl4AI n√£o encontrado
    echo    Execute: scripts\setup-python-services.bat
)

:: Verificar arquivos de configura√ß√£o
echo.
echo ‚öôÔ∏è Verificando configura√ß√µes...
if exist ".env" (
    echo ‚úÖ Arquivo .env encontrado
) else (
    echo ‚ö†Ô∏è Arquivo .env n√£o encontrado
    echo    Execute: copy .env.example .env
)

if exist "data" (
    echo ‚úÖ Diret√≥rio de dados encontrado
) else (
    echo ‚ö†Ô∏è Diret√≥rio de dados n√£o encontrado
    echo    Ser√° criado automaticamente
)

:: Verificar portas dispon√≠veis
echo.
echo üîå Verificando portas...
netstat -an | findstr :3000 >nul
if not errorlevel 1 (
    echo ‚ö†Ô∏è Porta 3000 em uso (Frontend)
) else (
    echo ‚úÖ Porta 3000 dispon√≠vel (Frontend)
)

netstat -an | findstr :3001 >nul
if not errorlevel 1 (
    echo ‚ö†Ô∏è Porta 3001 em uso (Backend)
) else (
    echo ‚úÖ Porta 3001 dispon√≠vel (Backend)
)

netstat -an | findstr :8000 >nul
if not errorlevel 1 (
    echo ‚ö†Ô∏è Porta 8000 em uso (Agno)
) else (
    echo ‚úÖ Porta 8000 dispon√≠vel (Agno)
)

netstat -an | findstr :8001 >nul
if not errorlevel 1 (
    echo ‚ö†Ô∏è Porta 8001 em uso (Crawl4AI)
) else (
    echo ‚úÖ Porta 8001 dispon√≠vel (Crawl4AI)
)

:: Resultado final
echo.
echo ===============================
if "%all_ok%"=="true" (
    echo ‚úÖ SISTEMA PRONTO PARA USO!
    echo.
    echo üöÄ Execute INICIAR.bat para come√ßar
) else (
    echo ‚ùå ALGUMAS DEPEND√äNCIAS EST√ÉO FALTANDO
    echo.
    echo üîß Solu√ß√µes:
    echo    1. Execute INICIAR.bat (configura√ß√£o autom√°tica)
    echo    2. Instale as depend√™ncias manualmente
    echo    3. Consulte docs\PYTHON_SETUP.md
)
echo ===============================
echo.

pause